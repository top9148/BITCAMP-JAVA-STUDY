"use strict"
// 함수 - 바깥 함수의 로컬 변수와 글로저

function generator(interest) { // 파라미터도 로컬 변수이다.
    
    // 클로저에서 바깥 함수의 로컬 변수를 사용한다면,
    // 클로저는 리턴될 때 자신만의 메모리 공간에 
    // 그 바깥 변수를 복제해 둔다.
    return function(money, year) {return money + ((money * interest) * year)};
    
}

// 원금 및 이자를 계산하는 함수를 가져오기

// 년 2.0%(0.02) 이자 계산
var f1 = generator(0.02)
var f2 = generator(0.08)

// f1(), f2()를 호출할 때는 f1(), f2()에서 참조하는 바깥 함수의 
// interest 변수는 존재하지 않는다.
// 그런데 어떻게 문제없이 실행될까?
// => 바로 각 closure가 자신만의 공간에 별도로 복제해둔 변수를 사용하기 때문이다.
// 왜 복제해 두었나?
// => 지금처럼 바깥 함수의 호출이 끝났을 때 그 바깥 함수의 로컬 변수도
//    제거되기 때문에 나중에 사용할 수 없는 문제가 발생한다.
// => 그래서 내장 함수(closure)는 항상 자신이 사용하는 바깥 함수의 로컬 변수를
//    무조건 자신의 메모리 공간에 복제해둔다.!
//
console.log(f1(8000000000, 1))
console.log(f2(8000000000, 1))





