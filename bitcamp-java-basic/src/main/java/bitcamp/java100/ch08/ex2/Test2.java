// 다형성(polymorphism) - 다형적 변수(polymorphic variables) II
// => 수퍼 클래스의 레퍼런스는 서브 클래스의 인스턴스를 주소를 저장할 수 있다.
//    왜? 서브 클래스의 인스턴스는 무조건 수퍼 클래스의 인스턴스를 모두 갖고 있기 때문이다.
// 
// => 그리고 분류 관점에서 상위 분류는 하위 분류의 항목을 가리킬 수 있다.
//    예) 동물 --> 사람, 
// => 주의! 하위 분류는 상위 분류의 항목을 가리킬 수 없다.
//    예) 사람 --> 포유류, 모든 포유류가 사람이 아니다. 그래서 불가하다!
// 
package bitcamp.java100.ch08.ex2;

public class Test2 {

    public static void main(String[] args) {
        
         
        Car c;
        
        // 하위 클래스의 객체를 가리킬 수 있는 이유?
        c = new Car();
        
        // 컴파일러는 c 레퍼런스의 사용을 검사할 때 
        // 그 레퍼런스의 타입 범위 안에서 사용되었는지 검사한다.
        // 예) c는 Car 타입이다. 따라서 Car의 모든 기능을 사용할 것이다.
        c.model = "티코";
        c.capacity = 4;
        c.enginType = 1;
        c.cylinder = 4;
        c.valve = 16;
        
        // auto는 Sedan 클래스에 있는 변수이다. 
        // 따라서 컴파일러는 Car 클래스에 없는 멤버를 사용하려 할 때 
        // 컴파일 오류를 발생시킨다.
        //c.auto = true;
        
        
        c = new Truck(); // 하위 분류를 가리킬 수 있다.
        // 위의 c 변수는 실제 Truck 인스턴스를 가리킨다.
        // Truck 객체에는 weight와 dump라는 변수가 있지만,
        // c 변수를 통해서는 오직 Car 클래스의 범위 안에서만 사용할 것이다.
        // 뭐, 어찌되었든 없는 멤버를 사용하지는 않는다.
        // 그래서 컴파일할 때 문제가 없는 것이다.
        c.model = "타이탄";
        c.capacity = 3;
        c.enginType = 2;
        c.cylinder = 8;
        c.valve = 32;
        
        // 비록 c가 Truck의 인스턴스를 가리키고 있고,
        // 그 인스턴스에 weight와 dump라는 변수가 있더라도 
        // c 변수를 통해서는 사용할 수 없다.
        //c.weight = 15;
        //c.dump = true;
        
        c = new Sedan(); // 하위 분류를 가리킬 수 있다.
        // 결론은 c가 가리키는 객체는 Car와 Car의 서브 클래스만 가능하다.
        // 따라서 무조건 Car 보다는 더 많은 기능이 있다.
        // 그 기능 중에 Car에 있는 기능만 쓴다하더라도 문제될 것은 없다.
        // 문제는 다음 예이다.
        
        
        
        // 만약 다음과 같이 서브 클래스의 레퍼런스가 수퍼 클래스의 객체를 가리킬 수 있다면,
        // 어떤 상황에 빠질 수 있는지 고민해보자!
        c = new Vehicle(); // 이것이 가능하다고 가정해보자!
        
        // c는 분명히 Vehicle 객체를 가리킨다.
        // Vehicle 객체에는 model과 capacity 변수만 있다.
        // 그런데 c는 Car 클래스의 레퍼런스이다.
        // 개발자는 c의 모든 기능을 사용하려 할 것이다.
        c.model = "소나타";
        c.capacity = 4;  // <==== 오호라... 여기까지는 좋다.
        
        //c가 가리키는 것은 Vehicle의 인스턴스인데,
        //아래의 코드는 Vehicle의 인스턴스에 없는 
        //Car에 있는 변수를 사용하려하고 있다.
        //이것이 문제가 되는 것이다.
        //만약 레퍼런스가 그 상위 타입의 객체를 가리키게 허용한다면!!!!
        c.enginType = 1;
        c.cylinder = 4;
        c.valve = 16; 
        
        
        
        
    }

}










