// 인터페이스 사용
package bitcamp.java100.ch12.ex1;

public class Caller {

    public static void main(String[] args) {
        
        // 인터페이스 사용
        // => 인터페이스를 구현한 객체를 사용하는 것을 말한다.
        // => 인터페이스에 선언된대로 메서드를 호출한다.
        
        Protocol obj = new Callee();
        // 인터페이스의 레퍼런스 변수의 의미?
        // => 해당 인터페이스를 구현한 클래스의 객체 주소를 저장한다.
        
        // String 클래스는 Protocol이라는 인터페이스 규칙에 따라
        // 클래스를 만들지 않았기 때문에 레퍼런스에 저장할 수 없다.
        // => 다형적 변수의 법칙이 적용된다.
        //
        //Protocol obj2 = new String(); // 컴파일 오류!

        // 인터페이스를 구현한 객체(줄여서 "인터페이스 구현체"라고 한다)를 
        // 사용해보자!
        // Protocol 인터페이스에 선언된 메서드만 호출할 수 있다.
        obj.m1();
        obj.m2();
        
        // 인터페이스를 만나면 다음 두 가지를 파악해야 한다.
        // 1) 누구와 누구의 호출 규칙인가?
        // 2) 나는 caller 쪽 클래스를 만드는 입장인가?
        //    아니면 callee 쪽 클래스를 만드는 입장인가?
        // 
        
    }

}






