package bitcamp.java100.ch06.ex1;

// 새 데이터를 다루는 연산자를 정의한다.
public class Score2 {
    // 필드 선언
    // => 메모리 설계 명령
    String name;
    int kor;
    int eng;
    int math;
    int sum;
    float aver;
    
    // 메서드 정의(= 연산자 정의)
    // => 새 데이터 타입에 맞춰서 그 데이터를 다루는 코드를 별도의 메서드로 정의해 둔다.
    // => 메서드가 하는 일이 기존의 연산자처럼 메모리의 데이터를 다루기 때문에 
    //    이렇게 인스턴스 데이터를 다루는 메서드를 "연산자(operator")라고도 부른다.
    // => 메서드 메모리를 다루는 명령어이기 때문에 
    //    메서드의 이름은 보통 동사로 시작한다.
    void compute() {
        this.sum = this.kor + this.eng + this.math;
        this.aver = this.sum / 3f;
        // 인스턴스의 변수를 다루려면 인스턴스의 주소를 알아야 한다.
        // 그래서 인스턴스 메서드를 호출할 때는 항상 다음과 같이 인스턴스 주소를 준다.
        // >    인스턴스주소.메서드명();
        // 이렇게 넘겨 받은 인스턴스 주소를 저장한 변수가 this 이다.
        // this 변수는 모든 인스턴스 메서드에 내장되어 있다. 
        // 그리고 이 변수에 인스턴스 주소가 저장되어 있다.
        //
        // this 변수가 null일 수 있는가? 없다.
        // 왜? 인스턴스주소 없이 메서드를 호출하면 실행 오류가 발생하기 때문이다.
        // 
    }
}

// 메서드의 종류
// 1) 인스턴스 메서드
//    => static이 붙지 않은 메서드
//    => 인스턴스 메모리를 다루는 용도
//    => 그래서 호출할 때 반드시 인스턴스 주소를 메서드 앞에 지정해야 한다.
//    => 그리고 그 인스턴스 주소를 받는 this라는 변수가 내장되어 있다.
//
// 2) 클래스 메서드 = 스태틱 메서드
//    => static이 붙은 메서드
//    => 소스 코드를 관리하기 쉽게 유사한 기능을 클래스에 묶어 둔 메서드이다.
//    => 호출할 때 인스턴스 주소를 명시할 필요가 없다.
//    => 그냥 클래스이름으로 호출하면 된다.
//    => 그래서 this라는 내장 변수가 없다.
//    => 인스턴스주소로도 호출할 수 있는데, this라는 내장 변수가 없기 때문에 
//       무의미 하다. 오히려 다른 개발자에게 인스턴스 메서드로 오해하게 만들 수 있다.
//    => 이런 메서드는 연산자라 부르지 않는다.












